#include <stdio.h>
#include "adf.h"
#include "board.h"
#include "sysparams.h"
#include "verify.h"
#include "awu.h"
#include "motor.h"
#include "BSP_SysTimer.h"
#include "stm8l15x_tim1.h"
#include "flash_ext.h"
#include "disp.h"
#include "menu.h"
#include "task_report.h"
#include "task_key.h"
#include "task_config.h"
#include "task_adc.h"
#include "task_disp.h"

#define TEST_WDG 0
#define TEST_COM 1
#define TEST_SOFT_TIMER 0
#define TEST_DELAY_MS 0
#define TEST_DELAY_US 0

void hardware_init(void)
{    
    /* PORT初始化 */
    GPIO_Init(GPIOA, GPIO_Pin_All, GPIO_Mode_Out_PP_Low_Slow );
    GPIO_Init(GPIOB, GPIO_Pin_All, GPIO_Mode_Out_PP_Low_Slow );
    GPIO_Init(GPIOC, GPIO_Pin_All, GPIO_Mode_Out_PP_Low_Slow );
    GPIO_Init(GPIOD, GPIO_Pin_All, GPIO_Mode_Out_PP_Low_Slow );
    GPIO_Init(GPIOE, GPIO_Pin_All, GPIO_Mode_Out_PP_Low_Slow );    
    GPIO_Init(GPIOF, GPIO_Pin_All, GPIO_Mode_Out_PP_Low_Slow );    
    GPIO_Init(GPIOG, GPIO_Pin_All, GPIO_Mode_Out_PP_Low_Slow );  
    
    /* system clock init */
    sysclk_init_hsi(CLK_SYSCLKDiv_2);   //一分频    
    //    /* Check if the system has resumed from IWDG reset */
    //    if (RST_GetFlagStatus(RST_FLAG_IWDGF) != RESET)
    //    {
    //        /* Clear IWDGF Flag */
    //        RST_ClearFlag(RST_FLAG_IWDGF);
    //    }     
    rtc_init();
    
    /* 自动唤醒时钟初始化 */
    awu_init();
    awu_enable(CYCLE_AWU);  
    
#if 1
    struct tm t;
    
    t.tm_year = 116;
    t.tm_mon  = 11;
    t.tm_mday = 13;
    t.tm_hour = 17;
    t.tm_min  = 45;
    t.tm_sec  = 50;
    
    rtc_write(t);   //把时钟写进去
#endif   
    
    /* com load configuration & init */
    com_load_config(com_cfg, sizeof(com_cfg)/sizeof(com_cfg[0]));
    com_init(COM1, 9600, USART_WordLength_8b, USART_StopBits_1, USART_Parity_No, USART_Mode_All, ENABLE, 0);
    //com_init(COM3, 9600, USART_WordLength_8b, USART_StopBits_1, USART_Parity_No, USART_Mode_All, ENABLE, 0);
    com_recv_init(COM1);
    //com_recv_init(COM2);  
    
    /* adc config & init */
    adc_load_config(adc_cfg, sizeof(adc_cfg)/sizeof(adc_cfg[0]));
    adc_close(ADC_TEMP);
    adc_close(ADC_BATT);
    //    adc_init(ADC_TEMP);
    //    adc_init(ADC_BATT);
    
    
    /* lcd config & init */
    lcd_load_config(&lcd_config);
    lcd_power_on();
    lcd_init();
    
    /* load key configure & init */
    key_load_config(key_config, sizeof(key_config)/sizeof(key_config[0]));
    key_init();
    
    /* rf config & init */
    rf_load_config(&rf_cfg);
    rf_power_off();
    //    rf_power_on();
    //    rv_rf = rf_init(4, RF_DATA_RATE_1200, TXPOW_20dBm, 18);
    //    if (rv != E_RF_OK)
    //    {
    //        printf("rv = %d\r\n", rv);
    //    } 
    //    printf("rv = %d\r\n",rv);
    
    /* exti_load_config(pwr_check_cfg, 1);
    exti_init();
    
    th_sht2x_load_config(&sht20_cfg);
    th_sht2x_power_on();
    th_sht2x_init();
    SHT2x_Init();
    
    flash_ext_load_config(&flash_config);
    flash_ext_init(); 
    
    // RFID load config
    rfid_load_config(&rfid_config);
    rv = rfid_init(&ctrl_reg, &ver_reg);
    if (rv != 0)
    {
    printf("rfid init error\r\n");
}   
    //printf("ctrl_reg:%02X, ver_reg:%02X\r\n", ctrl_reg, ver_reg);
    rfid_close();
    rfid_power_off(); */
    
    return;
}

void software_init(void)
{
    
    //eeprom_init();
    // 系统参数初始化
    //    printf("sizeof(g_sys_params) = %d\r\n" ,sizeof(g_sys_params));
    //    printf("sizeof(g_run_params) = %d\r\n" ,sizeof(g_run_params));
    memset(&g_sys_params, 0, sizeof(g_sys_params));
    memset(&g_run_params, 0, sizeof(g_run_params));
    //eeprom_write(0, (u8*)&g_sys_params, sizeof(g_sys_params));
    eeprom_read(0, (u8*)&g_sys_params, sizeof(g_sys_params));
    
    //g_run_params.menu_id = MENU_MAIN;
    //task_lcd_triggered(g_run_params.menu_id);
    
    //    // 密钥变换
    //    for (i=0; i<sizeof(g_des_key); ++i)
    //    {
    //        g_run_params.key[i] = ~(g_des_key[i]+0x88);
    //    }
    //    
    //    if (g_sys_params.valve_mode!=E_VALVE_MODE_OPEN && g_sys_params.valve_mode!=E_VALVE_MODE_CLOSE && g_sys_params.valve_mode!=E_VALVE_MODE_AUTO)
    //    {
    //        g_sys_params.valve_mode = E_VALVE_MODE_AUTO;
    //        g_sys_params.valve_state = E_VALVE_STATE_OPENED;
    //    }
    
#ifdef TASK_PRINTF
    printf("padding1 = %x\r\n" ,g_sys_params.padding1);
    printf("padding2 = %x\r\n" ,g_sys_params.padding2);
    printf("padding3 = %x\r\n" ,g_sys_params.padding3);
    printf("padding4 = %x\r\n" ,g_sys_params.padding4);
    printf("padding5 = %x\r\n" ,g_sys_params.padding5);
    printf("padding6 = %x\r\n" ,g_sys_params.padding6);
    printf("temp_set = %d\r\n" ,g_sys_params.temp_set);
    printf("g_sys_params.factory_flag = %x\r\n" ,g_sys_params.factory_flag);
#endif 
    
    
    factory_check();
    // RF频率
    g_sys_params.rf_fre = (g_sys_params.addr[0]>>4);
    // RF通道号
    g_sys_params.rf_channel = (unsigned char)(bcd_2_dec_type(g_sys_params.addr, 2, ORD_MOTOR)%1000);
    // RF功率
    g_sys_params.rf_power = TXPOW_20dBm;
    
    //    if (g_sys_params.factory_flag == 0 
    //        /*&& memcmp(g_sys_params.addr, "\x00\x00\x00\x00\x00", 5)!=0 
    //        && memcmp(g_sys_params.addr, "\x00\x00\x00\x00\x01", 5)!=0
    //        && memcmp(g_sys_params.addr, "\x41\x23\x00\x01\x01", 5)!=0
    //        && memcmp(g_sys_params.addr, "\x41\x24\x00\x01\x01", 5)!=0*/)
    //    {
    //        printf("g_sys_params.factory_flag = %x\r\n" ,g_sys_params.factory_flag);
    //        g_sys_params.factory_flag = 1;
    //        printf("g_sys_params.factory_flag = %x\r\n" ,g_sys_params.factory_flag);
    //        
    //        g_sys_params.temp_set = 250;
    //        printf("g_sys_params.temp_set = %d\r\n" ,g_sys_params.temp_set);
    //        
    //        u8 addr[5] = {0x40,0x18,0x00,0x01,0x01};//定义一个数组
    //        memcpy(g_sys_params.addr, addr, sizeof(g_sys_params.addr)/sizeof(g_sys_params.addr[0]));
    //        printf("g_sys_params.addr = %x\r\n" ,g_sys_params.addr);
    //        
    //        eeprom_init();
    //        eeprom_write(0, (u8*)&g_sys_params, sizeof(g_sys_params));   
    //        eeprom_close();    
    //    }
    
    
    
    
}

void system_print(void)
{
    struct tm t;
    rtc_read(&t);
    
    printf("\f");
    printf("Manufacturer:%s\r\n", manufacturer);
    printf("productmodel:%s\r\n", product_model);
    printf("Hardware Ver:%s\r\n", hw_ver);    
    printf("Software Ver:%s\r\n", sw_ver);
    
    printf("Factory Mode:%d\r\n", g_sys_params.factory_flag);
    printf("HeatPeriod:%02X-%02X~%02X-%02X\r\n", g_sys_params.heating_period_st[0],g_sys_params.heating_period_st[1],g_sys_params.heating_period_et[0],g_sys_params.heating_period_et[1]);
    printf("Product Code:%02X%02X %02X%02X %02X\r\n", g_sys_params.addr[0], g_sys_params.addr[1], g_sys_params.addr[2], g_sys_params.addr[3], g_sys_params.addr[4]);  
    printf("Room Name:%s\r\n", g_sys_params.room_name); 
}

void main(void)
{  
    // int t = 250;
    hardware_init(); 
    software_init();    
    system_print(); 
    PWR_UltraLowPowerCmd(ENABLE);
    
    
    /* 参数初始化 */
    /* 温度初始化 */
    g_run_params.temp = 180;
    task_lcd_triggered(MENU_MAIN);
    //    /* 剩余热量初始化 */
    //    g_sys_params.balance = 12347;
    /* 剩余热量单位 */
    g_sys_params.balance_unit = UNIT_KWH;//单位必须初始化
    //    /* 热量警告值 */
    //    g_sys_params.balance_alarm = 200;
    //    /* 累计热量初始化 */
    //    g_sys_params.heating_quantity = 1234;
    /* 累计热量单位 */
    g_sys_params.heating_quantity_unit = UNIT_KWH;
    //    /* 用热时间初始化 */
    //    g_sys_params.heating_time = 43000;
    /* 状态字初始化 */
    g_run_params.st = 0x00;
    /* 电池电量初始化 */
    g_run_params.batt_lvl = 5000;
    /* 无线闪烁标识 */
    g_run_params.ant_flash = 0x00;
    /* 无线标识 */
    g_run_params.ant_sts = 1;
    /* 登陆标志位 */
    g_run_params.sts_login = 0;
    /* 菜单查询标志初始化 */
    g_run_params.view_idx = 0;
    
    g_run_params.adc_keytrigger = 0;
    /* 按键触发上报标志 */
    //g_run_params.report_keytrigger = 1;
    /* 无线报文初始化 上电就发送报文 */
    task_report_init();
    /* adc采集初始化 上电就采集 */
    task_adc_init();
    
    enableInterrupts();
    
    //    memset(disp_buf, 0xff, sizeof(disp_buf));
    //    //LCD测试-全屏点亮
    //    lcd_update_screen(disp_buf, sizeof(disp_buf));
    //    
    //    memset(disp_buf, 0x00, sizeof(disp_buf));
    //    disp_buf[17] = 0xFF;
    //    disp_buf[16] = 0xFF;
    //    disp_buf[15] = 0xFF;
    //    disp_buf[14] = 0xFF;      
    //    disp_buf[13] = 0xFF;
    //    disp_buf[12] = 0xFF;    
    //    disp_buf[11] = 0xFF;
    //    disp_buf[10] = 0xFF;    
    //    disp_buf[11] = 0xFF;
    //    disp_buf[10] = 0xFF;
    //    disp_buf[9] = 0xFF;
    //    disp_buf[8] = 0xFF;
    //    disp_buf[7] = 0xFF;
    //    disp_buf[6] = 0xFF;
    //    disp_buf[5] = 0xFF;
    //    disp_buf[4] = 0xFF;
    //    disp_buf[3] = 0xFF;
    //    disp_buf[2] = 0xFF;
    //    lcd_write_seg(disp_buf, SEG_BH, 1);
    //    lcd_update_screen(disp_buf, sizeof(disp_buf));
    //    BSP_SysTimer_Config(0, 1);
    //    disp_digit(DIGIT1,1,1);
    //    
    //    lcd_update_screen(disp_buf, sizeof(disp_buf));
    //    printf("dispdigit");
    //    int i = 0;
    //    unsigned char list[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'b', 'c', 'd', 'E', 'F', 'S', 'T', '-', 'P', ' '};
    //    disp_surplus_heat();
    
    while (1)
    {
        if (g_sys_params.factory_flag == 0x01)
        {
            //com_close(COM1);
            halt();
            //wfi();
        }
        else
        {
            wfi();
        }
        //        disp_str(3, 5, "bcd");
        //        disp_update();
        //        for(i=0; i<20; i++)
        //        {
        //            
        //            disp_char(0, '1');
        //            disp_char(1, 'b');
        //            disp_char(2, list[i]);
        //            disp_char(3, list[i]);
        //            disp_char(4, list[i]);
        //            disp_char(5, list[i]);
        //            
        //            disp_update();
        //            delay_ms(1000);
        //        }
        //        
        //        
        //        disp_digit(DIGIT1, 1, 1);
        //        disp_update();
        //        //lcd_update_screen(disp_buf, sizeof(disp_buf));
        //        delay_ms(1000);
        //        printf("dispdigit");
    }
}

#ifdef  USE_FULL_ASSERT

/**
* @brief  Reports the name of the source file and the source line number
*   where the assert_param error has occurred.
* @param  file: pointer to the source file name
* @param  line: assert_param error line source number
* @retval None
*/
void assert_failed(uint8_t* file, uint32_t line)
{ 
    /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    
    printf("Wrong parameters value: file %s on line %lu\r\n", file, line);
    
    /* Infinite loop */
    while (1)
    {
    }
}
#endif