#include "adf.h"
#include "sysparams.h"
#include "board.h"
#include "task_key.h"
#include "key.h"
#include "menu.h"
#include "task_disp.h"
#include "task_report.h"
#include "cj188.h"
#include "task_adc.h"
#include "delay.h"
#include "task_disp.h"
#include "disp.h"


//u16 t = 250;
//u8 p = 1;

/* key status */
static KeyHandler s_key_handler; //定义了一个结构体变量

/*! \brief
*  按键进程
*/
void task_key_proc(void)
{ 
    //s_key_handler.timer_report++;
    //printf("g_sys_params.temp_set2222222=%d\r\n",g_sys_params.temp_set);
    switch(s_key_handler.sts)
    {
    case KEY_STS_IDLE:
        break;
    case KEY_STS_PUSH:
        // 判断是否为合法按键
        if (TRUE == key_check_valid(s_key_handler.key_val))
        {
            //printf("g_run_params.report_keytrigger = %d\r\n" ,g_run_params.report_keytrigger);
            //            if(s_key_handler.timer_report >= FIVE_SECOND)
            //            {
            //                g_run_params.report_keytrigger = 1;
            //            }
            //            
            //            if(g_run_params.report_keytrigger == 1)
            //            {
            //                s_key_handler.timer_report = 0;
            //                task_report_triggered(CTRL_CODE_REPORT);
            //                g_run_params.report_keytrigger = 0;
            //                
            //            }
            
            s_key_handler.sts = KEY_STS_VALID;
            g_run_params.adc_keytrigger = 0;//把adc采集由慢变快的标志清零，这样只要有按键按下，他都要6s之后刷新屏幕
            task_adc_timereset();
            
        }
        else
        {
            s_key_handler.sts = KEY_STS_IDLE;
        }
        break;
    case KEY_STS_VALID:
        // 检测按键释放
        delay_ms(10);
        if (TRUE == key_release(s_key_handler.key_val))
        {
            s_key_handler.sts = KEY_STS_DEAL;
        }
        break;
    case KEY_STS_DEAL:
        //printf("s_key_handler.key_val:%d\r\n",s_key_handler.key_val);
        //printf("key_code:%d\r\n",key_code);
        s_key_handler.timer = SIX_SECOND;
        switch(s_key_handler.key_val)
        {
        case '1':
            key_action_view();
            break;
        case '2':
            key_action_sub();
            break;
        case '3':
            key_action_add();
            break;
        case 'b':
            key_load_id();
            break;
        default:
            break;
        }
        //        if(s_key_handler.key_val == 49)
        //        { 
        //            key_action_view();
        //        }
        //        
        //        if(s_key_handler.key_val == 50)
        //        {
        //            key_action_sub();   
        //        }
        //        
        //        if(s_key_handler.key_val == 51)
        //        {
        //            key_action_add();
        //        }
        
        task_lcd_triggered(g_run_params.menu_id);
        eeprom_init();
        eeprom_write(24, (u8*)&(g_sys_params.temp_set), sizeof(g_sys_params.temp_set));//只写了设定温度，别的没写
        //printf("write sucess\r\n");
        eeprom_close();
        s_key_handler.sts = KEY_STC_FINISH;
        break;
    case KEY_STC_FINISH:
        s_key_handler.timer--;
        if(s_key_handler.timer <= 0)//为了让没有按键后过几秒自动切换成主屏幕并刷新室温，而不是一直等待adc采集的时间到了才刷新成主屏幕
        {
            g_run_params.view_idx = MENU_VIEW_IDX_BALANCE-1;
            g_run_params.adc_keytrigger = 1;
            task_report_triggered(CTRL_CODE_REPORT);//没有按键按下后6S触发上报，adc采集
            
            //task_adc_triggered();
            
            
            //            g_run_params.menu_id = MENU_MAIN;
            //            task_lcd_triggered(g_run_params.menu_id);
            
            //            printf("write[1]\r\n");
            //            eeprom_init();
            //            eeprom_write(24, (u8*)&(g_sys_params.temp_set), sizeof(g_sys_params.temp_set));//只写了设定温度，别的没写
            //            //printf("write sucess\r\n");
            //            eeprom_close();
            //            printf("write sucess\r\n");
            s_key_handler.sts = KEY_STS_IDLE;
        }
        
        break;
    default:
        break;  
    }
}

/*! \brief
*  按键触发函数
*/
void task_key_triggered(u8 key_code)
{
    s_key_handler.key_val = key_code;
    s_key_handler.sts = KEY_STS_PUSH;
#if TASK_PRINTF
    printf("key_code:%c\r\n", key_code);
#endif
}

/*! \brief
*  向上键动作
*/
void key_action_add(void)
{
    //printf("g_sys_params.temp_set1111111=%d\r\n",g_sys_params.temp_set);
    //eeprom_read(0, (u8*)&g_sys_params, sizeof(g_sys_params));
    //printf("g_sys_params.temp_set=%d\r\n",g_sys_params.temp_set);
    if(g_sys_params.temp_set < (g_sys_params.temp_room_uplimits*10))
    {
        g_sys_params.temp_set = g_sys_params.temp_set+5;    
    }
    else
    {
        g_sys_params.temp_set = (g_sys_params.temp_room_uplimits*10);
    }
    g_run_params.temp_return = g_sys_params.temp_set;
    //    eeprom_init();
    //    eeprom_write(0, (u8*)&g_sys_params, sizeof(g_sys_params));
    //    //printf("write sucess\r\n");
    //    eeprom_close();
    g_run_params.menu_id = MENU_SET_TEMP;
}

/*! \brief
*  向下键动作
*/
void key_action_sub(void)
{
    //eeprom_read(0, (u8*)&g_sys_params, sizeof(g_sys_params));
    
    if(g_sys_params.temp_set > (g_sys_params.temp_room_lowlimits*10))
    {
        g_sys_params.temp_set = g_sys_params.temp_set-5;
    }
    else
    {
        g_sys_params.temp_set = (g_sys_params.temp_room_lowlimits*10);
    }
    g_run_params.temp_return = g_sys_params.temp_set;
    //    eeprom_init();
    //    eeprom_write(0, (u8*)&g_sys_params, sizeof(g_sys_params));
    //    //printf("write sucess\r\n");
    //    eeprom_close();
    
    g_run_params.menu_id = MENU_SET_TEMP; 
}

/*! \brief
*  查询建动作
*/
void key_action_view(void)
{
    //printf("g_run_params.view_idx = %d\r\n" ,g_run_params.view_idx);
    g_run_params.view_idx ++;
    //printf("g_run_params.view_idx = %d\r\n" ,g_run_params.view_idx);
    if(g_run_params.view_idx >= 10)
    {
        g_run_params.view_idx = MENU_VIEW_IDX_BALANCE;//循环到剩余热量
    }
    
    //printf("g_sys_params.disp_ctl = %x\r\n" ,g_sys_params.disp_ctl);
    /* 如果现在是剩余热量，但是不让显示，跳过进入累计热量 控制码的8位，哪个为1显示哪项，全是FF都显示，00都不显示*/
    if (g_run_params.view_idx==MENU_VIEW_IDX_BALANCE && !(g_sys_params.disp_ctl&DISP_CTL_BALANCE))
    {
        g_run_params.view_idx = MENU_VIEW_IDX_HEATING_QUANTITY_TOTAL;
    } 
    
    /* 如果现在是累计热量，但是不让显示，跳过进入用热时间 */
    if (g_run_params.view_idx==MENU_VIEW_IDX_HEATING_QUANTITY_TOTAL && !(g_sys_params.disp_ctl&DISP_CTL_HEAT_QUANTITY_TOTAL))
    {
        g_run_params.view_idx = MENU_VIEW_IDX_HEATING_TIME_TOTAL;
    }
    /* 如果现在是用热时间，但是不让显示，跳过进入故障 */
    if (g_run_params.view_idx==MENU_VIEW_IDX_HEATING_TIME_TOTAL && !(g_sys_params.disp_ctl&DISP_CTL_HEAT_TIME_TOTAL))
    {
        g_run_params.view_idx = MENU_VIEW_IDX_FAULT;
    }
    /* 如果现在是故障，但是不让显示，跳过进入房间号 */
    if (g_run_params.view_idx==MENU_VIEW_IDX_FAULT && !(g_sys_params.disp_ctl&DISP_CTL_FAULT))
    {
        g_run_params.view_idx = MENU_VIEW_IDX_ROOM_ID;
    }
    /* 如果现在是房间号，但是不让显示，跳过进入编号左 */
    if (g_run_params.view_idx==MENU_VIEW_IDX_ROOM_ID && !(g_sys_params.disp_ctl&DISP_CTL_ROOM_NAME))
    {
        g_run_params.view_idx = MENU_VIEW_IDX_ID_LEFT;
    }
    
    
    g_run_params.menu_id  = MENU_VIEW;
    
}

/*! \brief
*  下载ID
*/
void key_load_id(void)
{
    int rv;
    static int i=0;
    if (g_sys_params.factory_flag==0 && memcmp(g_sys_params.addr, "\x00\x00\x00\x00\x00", 5)==0)
    {
        i++;
        if(i >= 2)
        {
            i = 0;
            rf_close();
            rf_power_off();
            printf("NOT SET ID\r\n");
            //task_lcd_triggered(MENU_MAIN);
            
        }
        else
        {
            rf_power_on();
            //printf("g_sys_params.rf_fre = %d\r\n" ,g_sys_params.rf_fre);
            //printf("g_sys_params.rf_channel = %d\r\n" ,g_sys_params.rf_channel);
            rv = rf_init(RF_FRE_410_5M, RF_DATA_RATE_1200, TXPOW_20dBm, 0);
            if (rv == 0)
            {
                printf("SET ID\r\n");
                disp_clr_region();
                disp_digit(DIGIT1,1,1);
                //disp_str(3, 4, "1d");
                disp_update();
            }
        }
    }
}